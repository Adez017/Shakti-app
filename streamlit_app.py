import streamlit as st
import pandas as pd
import os
from datetime import datetime
import speech_recognition as sr
from pydub import AudioSegment
import tempfile

# ========== Page Config ==========
st.set_page_config(
    page_title="Meri Kahaani Zinda Hai",
    page_icon="ЁЯУЦ",
    layout="centered"
)

# ========== CSV File Setup ==========
CSV_FILE = "anonymous_stories.csv"

def save_story(text):
    entry = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "story": text.strip()
    }
    if os.path.exists(CSV_FILE):
        df = pd.read_csv(CSV_FILE)
        df = pd.concat([df, pd.DataFrame([entry])], ignore_index=True)
    else:
        df = pd.DataFrame([entry])
    df.to_csv(CSV_FILE, index=False)

# ========== Audio Conversion ==========
def convert_to_wav(uploaded_file):
    audio_format = uploaded_file.type.split("/")[-1]
    temp_input = tempfile.NamedTemporaryFile(delete=False, suffix="." + audio_format)
    temp_input.write(uploaded_file.read())
    temp_input.flush()

    audio = AudioSegment.from_file(temp_input.name)
    temp_wav = tempfile.NamedTemporaryFile(delete=False, suffix=".wav")
    audio.export(temp_wav.name, format="wav")
    return temp_wav.name

# ========== Audio Transcription ==========
def transcribe_audio(audio_path):
    recognizer = sr.Recognizer()
    with sr.AudioFile(audio_path) as source:
        audio_data = recognizer.record(source)
        return recognizer.recognize_google(audio_data, language="hi-IN")

# ========== Language Selection ==========
language = st.selectbox("ЁЯМР Choose Language / рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ", ["English", "Hindi", "Tamil", "Bengali"])

translations = {
    "English": {
        "title": "Meri Kahaani Zinda Hai",
        "subtitle": "Your story is still alive",
        "upload_audio": "Upload your voice (MP3, WAV, M4A)",
        "write_story": "Write your story",
        "submit": "Submit",
        "success": "Your story has been saved. Thank you!",
        "error": "Please do not submit an empty story.",
        "transcribed": "Transcribed Text (editable):"
    },
    "Hindi": {
        "title": "рдореЗрд░реА рдХрд╣рд╛рдиреА рдЬрд╝рд┐рдВрджрд╛ рд╣реИ",
        "subtitle": "рд╣рд░ рдЖрд╡рд╛рдЬрд╝ рдЕрдм рд╕рд╛рдБрд╕ рд▓реЗ рд░рд╣реА рд╣реИ",
        "upload_audio": "рдЕрдкрдиреА рдЖрд╡рд╛рдЬрд╝ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ (MP3, WAV, M4A)",
        "write_story": "рдЕрдкрдиреА рдХрд╣рд╛рдиреА рд▓рд┐рдЦреЗрдВ",
        "submit": "рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ",
        "success": "рдЖрдкрдХреА рдХрд╣рд╛рдиреА рд╕реЗрд╡ рд╣реЛ рдЧрдИ рд╣реИред рдзрдиреНрдпрд╡рд╛рдж!",
        "error": "рдХреГрдкрдпрд╛ рдЦрд╛рд▓реА рдХрд╣рд╛рдиреА рд╕рдмрдорд┐рдЯ рди рдХрд░реЗрдВред",
        "transcribed": "рдмрджрд▓рд╛ рдЧрдпрд╛ рдЯреЗрдХреНрд╕реНрдЯ (рд╕рдВрдкрд╛рджрди рдХрд░реЗрдВ):"
    },
    "Tamil": {
        "title": "роОройрпН роХродрпИ роЙропро┐ро░рпБроЯройрпН роЙро│рпНро│родрпБ",
        "subtitle": "роЙроЩрпНроХро│рпН роХродрпИ роЗройрпНройрпБроорпН роЙропро┐ро░рпБроЯройрпН роЙро│рпНро│родрпБ",
        "upload_audio": "роЙроЩрпНроХро│рпН роХрпБро░ро▓рпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН (MP3, WAV, M4A)",
        "write_story": "роЙроЩрпНроХро│рпН роХродрпИропрпИ роОро┤рпБродрпБроЩрпНроХро│рпН",
        "submit": "роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН",
        "success": "роЙроЩрпНроХро│рпН роХродрпИ роЪрпЗрооро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ. роиройрпНро▒ро┐!",
        "error": "роХро╛ро▓ро┐ропро╛рой роХродрпИропрпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХ ро╡рпЗрогрпНроЯро╛роорпН.",
        "transcribed": "рооро╛ро▒рпНро▒ро┐роп роЙро░рпИ (родро┐ро░рпБродрпНродроХрпНроХрпВроЯро┐ропродрпБ):"
    },
    "Bengali": {
        "title": "ржЖржорж╛рж░ ржЧрж▓рзНржк ржПржЦржиржУ ржмрзЗржБржЪрзЗ ржЖржЫрзЗ",
        "subtitle": "ржЖржкржирж╛рж░ ржХржгрзНржа ржПржЦржирзЛ ржЬрзАржмрж┐ржд",
        "upload_audio": "ржЖржкржирж╛рж░ ржХржгрзНржа ржЖржкрж▓рзЛржб ржХрж░рзБржи (MP3, WAV, M4A)",
        "write_story": "ржЖржкржирж╛рж░ ржЧрж▓рзНржк рж▓рж┐ржЦрзБржи",
        "submit": "ржЬржорж╛ ржжрж┐ржи",
        "success": "ржЖржкржирж╛рж░ ржЧрж▓рзНржк рж╕ржВрж░ржХрзНрж╖рж┐ржд рж╣ржпрж╝рзЗржЫрзЗред ржзржирзНржпржмрж╛ржж!",
        "error": "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЦрж╛рж▓рж┐ ржЧрж▓рзНржк ржЬржорж╛ ржжрзЗржмрзЗржи ржирж╛ред",
        "transcribed": "рж▓рж┐ржкрзНржпржирзНрждрж░рж┐ржд ржкрж╛ржарзНржп (рж╕ржорзНржкрж╛ржжржирж╛ржпрзЛржЧрзНржп):"
    }
}

T = translations[language]

# ========== Header ==========
st.markdown(f"""
    <div style='text-align: center; padding: 10px;'>
        <h1 style='color:#4a2c2a;'>ЁЯУЦ {T['title']}</h1>
        <h4 style='color:#555;'>{T['subtitle']}</h4>
    </div>
""", unsafe_allow_html=True)
st.markdown("---")

# ========== Audio Upload ==========
st.subheader("ЁЯОЩя╕П " + T['upload_audio'])
uploaded_audio = st.file_uploader(label="", type=["mp3", "wav", "m4a", "ogg"])

story = ""

if uploaded_audio:
    st.info("тП│ Transcribing audio...")
    try:
        wav_path = convert_to_wav(uploaded_audio)
        text = transcribe_audio(wav_path)
        st.success("тЬЕ Transcription successful!")
        story = st.text_area(T["transcribed"], value=text, height=200)
    except Exception as e:
        st.error(f"тЪая╕П Error: {e}")
        story = ""

# ========== Text Area ==========
st.subheader("тЬНя╕П " + T['write_story'])
story_text = st.text_area(label="", value="", height=300)

if not story and story_text:
    story = story_text

# ========== Submit Button ==========
if st.button("ЁЯУд " + T['submit']):
    if story.strip():
        save_story(story)
        st.success("тЬЕ " + T['success'])
    else:
        st.warning("тЪая╕П " + T['error'])

st.markdown("---")
st.caption("ЁЯУЬ рд╣рд░ рд╢рдмреНрдж рдореЗрд░рд╛ рд╣реИ, рд╣рд░ рд▓рд╛рдЗрди рдореЗрд░рд╛ рд╕рдЪ тАФ рдореЗрд░реА рдХрд╣рд╛рдиреА рдЬрд╝рд┐рдВрджрд╛ рд╣реИред")

